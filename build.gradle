plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle' version '[6.0,6.2)'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'org.spongepowered.mixin' version '0.7.+'
    id "me.modmuss50.mod-publish-plugin" version "0.3.3"
}

version = "${minecraft_version}-${mod_version}"
group = mod_group_id

base {
    archivesName = mod_id
}

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

jarJar.enable()

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"

sourceSets {
    main {
        resources {
            // Include resources generated by data generators
            srcDir 'src/generated/resources'
        }
    }

    // Add a sourceset for data generation
    datagen
}

minecraft {
    mappings channel: mapping_channel, version: mapping_version

    copyIdeResources = true

    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg') // Currently, this location cannot be changed from the default.

    runs {
        configureEach {
            workingDirectory project.file("run/${it.name}")

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        client {
            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', mod_id

            if (project.hasProperty('mc_uuid')) {
                // Your UUID, trimmed / without the dashes
                args '--uuid', project.getProperty('mc_uuid')
            }
            if (project.hasProperty('mc_username')) {
                args '--username', project.getProperty('mc_username')
            }
            if (project.hasProperty('mc_accessToken')) {
                args '--accessToken', project.getProperty('mc_accessToken')
            }
        }

        server {
            property 'forge.enabledGameTestNamespaces', mod_id
            args '--nogui'
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        gameTestServer {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        data {
            // Replace the module from 'main' to 'datagen'
            ideaModule ideaModule.substring(0, ideaModule.lastIndexOf('.')) + '.datagen'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', mod_id,
                    '--all',
                    '--output',
                    file('src/generated/resources/'),
                    '--existing', file('src/main/resources/'),
            '--existing-mod' , "dynamictrees",
            '--existing-mod' , "cobblemon",
            '--existing-mod' , "gravelmon"

            mods {
                "${mod_id}" {
                    source sourceSets.datagen
                }
            }
        }
    }
}

mixin {
    add sourceSets.main, "${mod_id}.refmap.json"

    // Sets up the mixin config; this gets added to run configurations and the manifest in the final jar
    config "${mod_id}.mixins.json"

    // Enables exporting mixin-changed classes to .mixin.out in the run folder
    debug.export = true
}

configurations {
    datagenCompileClasspath.extendsFrom compileClasspath
    datagenRuntimeClasspath.extendsFrom runtimeClasspath

    datagenRuntimeClasspath {
        // To exclude a dependency from running in datagen, uncomment the line below and change the group and module names accordingly.
        // exclude group: 'com.example', module: 'example'
    }
}

repositories {
    mavenLocal()
    maven {
        name = 'MinecraftForge'
        url = 'https://maven.minecraftforge.net/'

        content {
            includeGroup 'net.minecraftforge'
        }
    }


    maven {
        name = 'Cursemaven'
        url = 'https://cursemaven.com'

        content {
            includeGroup 'curse.maven'
        }
    }
    maven {
        url = "https://harleyoconnor.com/maven"
    }
    maven{
        url = "https://squiddev.cc/maven/"
    } //cc-twekaed
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    datagenImplementation sourceSets.main.output
    annotationProcessor "org.spongepowered:mixin:${mixin_version}:processor"

    // Suggestion Provider Fix
    runtimeOnly fg.deobf("com.harleyoconnor.suggestionproviderfix:SuggestionProviderFix-${minecraft_version}:${suggestion_provider_fix_version}")
    implementation fg.deobf("curse.maven:cobblemon-687131:5375390")
    implementation fg.deobf("curse.maven:kotlin-for-forge-351264:5402061")
    implementation(fg.deobf("com.ferreusveritas.dynamictrees:DynamicTrees-${minecraft_version}:${property("dt_version")}"))
    runtimeOnly(fg.deobf("cc.tweaked:cc-tweaked-$minecraft_version-core:${property("ccVersion")}"))
    runtimeOnly(fg.deobf("cc.tweaked:cc-tweaked-$minecraft_version-forge:${property("ccVersion")}"))

    implementation fg.deobf("curse.maven:gravelmon-928129:5519657")
    implementation fg.deobf("curse.maven:architectury-api-419699:5137938")
    implementation fg.deobf("curse.maven:packet-fixer-689467:5416166")
    implementation fg.deobf("curse.maven:gravels-extended-battles-930317:5516822")
    implementation fg.deobf("curse.maven:midnightlib-488090:4980331")
}

tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version   : minecraft_version, minecraft_version_range: minecraft_version_range,
            forge_version       : forge_version, forge_version_range: forge_version_range,
            loader_version_range: loader_version_range,
            mod_id              : mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors         : mod_authors, mod_description: mod_description
    ]
    inputs.properties replaceProperties

    var replaceTargets = [
            'META-INF/mods.toml', 'pack.mcmeta', "${mod_id}.mixins.json".toString(),
            "assets/${mod_id}/blockstates/hundred_media.json".toString(),
            "assets/${mod_id}/models/block/hundred_media.json".toString(),
            "assets/${mod_id}/models/item/hundred_media.json".toString()
    ]
    filesMatching(replaceTargets) {
        expand replaceProperties + [project: project]
    }
}

java {
    withSourcesJar()
}

tasks.named('jar', Jar).configure {
    archiveClassifier = 'slim'
    manifest {
        attributes([
                'Specification-Title'     : mod_id,
                'Specification-Vendor'    : mod_authors,
                'Specification-Version'   : '1', // We are version 1 of ourselves
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : mod_version,
                'Implementation-Vendor'   : mod_authors,
                'Implementation-Timestamp': new Date().format('yyyy-MM-dd\'T\'HH:mm:ssZ')
        ])
    }
    finalizedBy 'reobfJar'
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            artifact tasks.jarJar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}
publishMods {
    if(publishForge) {
        file = jar.archiveFile
        changelog = file("changelog.md").text
        type = STABLE
        modLoaders.add("forge")
        displayName = "${mod_name}-${minecraft_version}-[Forge]-${project.version}"
        dryRun = dry_run.toBoolean()
        if (curseforge_publishing_enabled.toBoolean()) {
            curseforge {
                projectId = curseforge_project_id
//                accessToken = curseforge_token
                minecraftVersions.add(minecraft_version)
                requires {
                    slug = "dynamictrees"
                }
                requires {
                    slug = "cobblemon"
                }
            }
        }
        if (modrinth_publishing_enabled.toBoolean()) {
            modrinth {
//                accessToken = modrinth_token
                projectId = modrinth_project_id
                minecraftVersions.add(minecraft_version)
                requires {
                    slug = "dynamictrees"
                }
                requires {
                    slug = "cobblemon"
                }
            }
        }
    }
}
